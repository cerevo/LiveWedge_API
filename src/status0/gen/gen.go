package main

import (
	"fmt"
	"os"
	"log"
)

const head = `// This file is auto-generated by gen.go. Do not edit.

package main

import (
	"bytes"
	"encoding/binary"
	"log"
	"unsafe"
)
`

const fa = `
func read%[1]s(len int, reader *bytes.Reader) {
	var a %[1]sType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %%T len=%%d\n", a, len)
		return
	}
	err := binary.Read(reader, LE, &a)
	checkError(err)
	if %[1]s != a {
		log.Printf("%%#v\n", a)
		%[1]s = a
	}
}
`
const fb = `
func read%[1]s(len int, reader *bytes.Reader) {
	var a uint32
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %%T len=%%d\n", a, len)
		return
	}
	err := binary.Read(reader, LE, &a)
	checkError(err)
	if %[1]s != a {
		log.Printf("%[1]s %%#v\n", a)
		%[1]s = a
	}
}
`

func main() {
	a := []string{
		"RecordingStatus",
		"FadeToDefaultColorStatus",
		"ExternalInputStatus",
		"ProgramOutStatus",
		"PreviewOutStatus",
		"CasterMessage",
		"CasterStatistics",
		"SwitcherStatus",
		"AudioMixerStatus",
		"AudioMixerAllStatus",
		"AudioPeakStatus",
	}
	b := []string{
		"SwMode",
		"DefaultBackgroundColor",
		"MountStatus",
		"PreviewMode",
	}

	file, err := os.Create("a.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	fmt.Fprint(file, head)
	for _, v := range a {
		fmt.Fprintf(file, fa, v)
	}
	for _, v := range b {
		fmt.Fprintf(file, fb, v)
	}
}
